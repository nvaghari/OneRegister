// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using OneRegister.Data.Entities.MasterCardGems;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace OneRegister.Data.Context.MasterCard
{
    public partial class MasterCardContext
    {
        private MasterCardContextProcedures _procedures;

        public virtual MasterCardContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MasterCardContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public MasterCardContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CDDActionDV_ListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CDDActionDV_SetVeriStatusL1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<CDDActionID_EKyc_SetVeriStatusL1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<CDDActionID_ListRequestsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CDDActionIV_ListBankAcctInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CDDActionIV_SetBankAcctStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<Channel_ListServicePackagesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ErrorLog_GetResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GenFormNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAppVersionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPersonInfoJsonResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RegCust_Init3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<RegCust_SetDVStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RegCust_SetIVStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RegCust_SetKycStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ServicePackage_ListFieldMandatorinessResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SSTxn_ListRequestsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SSTxn_SetResultV2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<WFForms_ListResult>().HasNoKey().ToView(null);
        }
    }

    public interface IMasterCardContextProceduresContract
    {
        Task<List<CDDActionDV_ListResult>> CDDActionDV_ListAsync(int? CDDActionDV, string EntityCIF, string ListDVStatus, string DVMechanism, DateTime? DVStartDateFrom, DateTime? DVStartDateTo, CancellationToken cancellationToken = default);
        Task<List<CDDActionDV_SetVeriStatusL1Result>> CDDActionDV_SetVeriStatusL1Async(string xUser, int? CDDActionDV, string DVStatusL1, string DVMechanism, int? MatchScore, string VeriBy, string ProcessorID, string ProcessorTxnID, string VeriRemarks, string jsonResultsRaw, string ErrorMsg, CancellationToken cancellationToken = default);
        Task<List<CDDActionID_EKyc_SetVeriStatusL1Result>> CDDActionID_EKyc_SetVeriStatusL1Async(int? CDDActionID, string KycFaceRecogStatus, string ErrorMsg, int? MatchScore, string ProcessorID, string ProcessorTxnID, string FaceDmsId, string RefDocPage1DmsId, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Nationality, string IdType, string IdValue, DateTime? BirthDate, string Gender, string jsonAddr, DateTime? DocExpiry, DateTime? DocIssuingDate, string DocIssuingPlace, string DocIssuingCountry, string DocIssuingAuthority, string VeriRemarks, string VeriBy, string jsonResultsRaw, CancellationToken cancellationToken = default);
        Task<List<CDDActionID_ListRequestsResult>> CDDActionID_ListRequestsAsync(int? CDDActionID, CancellationToken cancellationToken = default);
        Task<List<CDDActionIV_ListBankAcctInfoResult>> CDDActionIV_ListBankAcctInfoAsync(int? CDDActionIV, string EntityCIF, string ListIVStatus, string IVMechanism, DateTime? IVStartDateFrom, DateTime? IVStartDateTo, short? BankAcctCodeType, CancellationToken cancellationToken = default);
        Task<List<CDDActionIV_SetBankAcctStatusResult>> CDDActionIV_SetBankAcctStatusAsync(int? CDDActionIV, string IVBankBIC, string IVBankAcctNo, string IVBankAcctName, string IVBankBranch, string ProcessorID, string ProcessorTxnID, string IVMechanism, string ErrorMsg, CancellationToken cancellationToken = default);
        Task<List<Channel_ListServicePackagesResult>> Channel_ListServicePackagesAsync(string Channel, string ListPackages, CancellationToken cancellationToken = default);
        Task<List<ErrorLog_GetResult>> ErrorLog_GetAsync(int? ErrTicket, CancellationToken cancellationToken = default);
        Task<int> GenFormNoAsync(string FormType, CancellationToken cancellationToken = default);
        Task<int> GetAppVersionAsync(CancellationToken cancellationToken = default);
        Task<int> GetPersonInfoJsonAsync(int? EntityID, string NID, string PassportNo, string ID3Type, string ID3Value, string CustAuthMode, CancellationToken cancellationToken = default);
        Task<List<RegCust_Init3Result>> RegCust_Init3Async(string ICSource, string Channel, string ListPackages, string CustAuthMode, string OrgID, string Title, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Suffix, string Patronym, string Nationality, string NID, string PassportNo, DateTime? PassportExpiry, DateTime? PassportIssuingDate, string PassportIssuingPlace, string PassportIssuingAuthority, DateTime? BirthDate, string Gender, string MobileNo, string Email, string jsonAddrHome, string jsonAddrPost, string BankBIC, string BankAcctNo, string BankAcctName, string fpxBIC, string fpxAcctName, string OccType, string OccIndustry, string OccPosition, string OccCompany, string MotherName, string FaceDmsId, string DocPage1DmsId, string DocPage2DmsId, string emCardDesign, string mcCardDesign, string xUser, CancellationToken cancellationToken = default);
        Task<List<RegCust_SetDVStatusResult>> RegCust_SetDVStatusAsync(string RegCaseID, string DVMechanism, string ProcessorID, string ProcessorTxnID, string DocType, string DocImg1, string DocImg2, string VeriStatus, int? MatchScore, string Remarks, CancellationToken cancellationToken = default);
        Task<List<RegCust_SetIVStatusResult>> RegCust_SetIVStatusAsync(string RegCaseID, string FieldName, string FieldStatus, string IVMechanism, string ProcessorID, string ProcessorTxnID, int? IVMatchScore, string IVFieldValue, string Remarks, CancellationToken cancellationToken = default);
        Task<List<RegCust_SetKycStatusResult>> RegCust_SetKycStatusAsync(string RegCaseID, string CustAuthMode, string ProcessorID, string ProcessorTxnID, string IDMechanism, string KycFaceRecogStatus, int? MatchScore, string FaceDmsId, string RefDocPage1DmsId, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Nationality, string IdType, string IdValue, DateTime? BirthDate, string Gender, string jsonAddr, string RefDocPage2DmsId, DateTime? DocExpiry, DateTime? DocIssuingDate, string DocIssuingPlace, string DocIssuingCountry, string DocIssuingAuthority, string Remarks, string xUser, CancellationToken cancellationToken = default);
        Task<List<ServicePackage_ListFieldMandatorinessResult>> ServicePackage_ListFieldMandatorinessAsync(string ListPackages, CancellationToken cancellationToken = default);
        Task<List<SSTxn_ListRequestsResult>> SSTxn_ListRequestsAsync(int? CDDActionSS, CancellationToken cancellationToken = default);
        Task<List<SSTxn_SetResultV2Result>> SSTxn_SetResultV2Async(int? CDDActionSS, string jsonRes, CancellationToken cancellationToken = default);
        Task<List<WFForms_ListResult>> WFForms_ListAsync(string FormNo, string FormType, string OrganizationId, string ListFormStatus, string ListChannel, string ListServicePackage, string FullName, string MobileNo, string IdNo, int? HostSubmitStatus, DateTime? xDateCreatedFrom, DateTime? xDateCreatedTo, string xUser, CancellationToken cancellationToken = default);
    }

    public partial class MasterCardContextProcedures
    {
        private readonly MasterCardContext _context;

        public MasterCardContextProcedures(MasterCardContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CDDActionDV_ListResult>> CDDActionDV_ListAsync(int? CDDActionDV, string EntityCIF, string ListDVStatus, string DVMechanism, DateTime? DVStartDateFrom, DateTime? DVStartDateTo, OutputParameter<int?> RowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRowCount = new SqlParameter
            {
                ParameterName = "RowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionDV",
                    Value = CDDActionDV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EntityCIF",
                    Size = 20,
                    Value = EntityCIF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListDVStatus",
                    Size = 10,
                    Value = ListDVStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DVMechanism",
                    Size = 32,
                    Value = DVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DVStartDateFrom",
                    Value = DVStartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DVStartDateTo",
                    Value = DVStartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterRowCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionDV_ListResult>("EXEC @returnValue = [aml].[CDDActionDV_List] @CDDActionDV, @EntityCIF, @ListDVStatus, @DVMechanism, @DVStartDateFrom, @DVStartDateTo, @RowCount OUTPUT", sqlParameters, cancellationToken);

            RowCount.SetValue(parameterRowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CDDActionDV_SetVeriStatusL1Result>> CDDActionDV_SetVeriStatusL1Async(string xUser, int? CDDActionDV, string DVStatusL1, string DVMechanism, int? MatchScore, string VeriBy, string ProcessorID, string ProcessorTxnID, string VeriRemarks, string jsonResultsRaw, string ErrorMsg, OutputParameter<string> DVStatusAgg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterDVStatusAgg = new SqlParameter
            {
                ParameterName = "DVStatusAgg",
                Size = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = DVStatusAgg?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "xUser",
                    Size = 200,
                    Value = xUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CDDActionDV",
                    Value = CDDActionDV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DVStatusL1",
                    Size = 1,
                    Value = DVStatusL1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "DVMechanism",
                    Size = 32,
                    Value = DVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MatchScore",
                    Value = MatchScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VeriBy",
                    Size = 200,
                    Value = VeriBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 50,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VeriRemarks",
                    Size = 600,
                    Value = VeriRemarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jsonResultsRaw",
                    Size = -1,
                    Value = jsonResultsRaw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorMsg",
                    Size = 100,
                    Value = ErrorMsg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterDVStatusAgg,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionDV_SetVeriStatusL1Result>("EXEC @returnValue = [aml].[CDDActionDV_SetVeriStatusL1] @xUser, @CDDActionDV, @DVStatusL1, @DVMechanism, @MatchScore, @VeriBy, @ProcessorID, @ProcessorTxnID, @VeriRemarks, @jsonResultsRaw, @ErrorMsg, @DVStatusAgg OUTPUT", sqlParameters, cancellationToken);

            DVStatusAgg.SetValue(parameterDVStatusAgg.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CDDActionID_EKyc_SetVeriStatusL1Result>> CDDActionID_EKyc_SetVeriStatusL1Async(int? CDDActionID, string KycFaceRecogStatus, string ErrorMsg, int? MatchScore, string ProcessorID, string ProcessorTxnID, string FaceDmsId, string RefDocPage1DmsId, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Nationality, string IdType, string IdValue, DateTime? BirthDate, string Gender, string jsonAddr, DateTime? DocExpiry, DateTime? DocIssuingDate, string DocIssuingPlace, string DocIssuingCountry, string DocIssuingAuthority, string VeriRemarks, string VeriBy, string jsonResultsRaw, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionID",
                    Value = CDDActionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "KycFaceRecogStatus",
                    Size = 1,
                    Value = KycFaceRecogStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorMsg",
                    Size = 300,
                    Value = ErrorMsg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MatchScore",
                    Value = MatchScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 32,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FaceDmsId",
                    Size = 256,
                    Value = FaceDmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RefDocPage1DmsId",
                    Size = 256,
                    Value = RefDocPage1DmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 200,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 200,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName1",
                    Size = 200,
                    Value = MiddleName1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName2",
                    Size = 200,
                    Value = MiddleName2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 200,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nationality",
                    Size = 2,
                    Value = Nationality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdType",
                    Size = 32,
                    Value = IdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdValue",
                    Size = 20,
                    Value = IdValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 1,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "jsonAddr",
                    Size = 8000,
                    Value = jsonAddr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocExpiry",
                    Value = DocExpiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingDate",
                    Value = DocIssuingDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingPlace",
                    Size = 50,
                    Value = DocIssuingPlace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingCountry",
                    Size = 2,
                    Value = DocIssuingCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingAuthority",
                    Size = 50,
                    Value = DocIssuingAuthority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VeriRemarks",
                    Size = 600,
                    Value = VeriRemarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VeriBy",
                    Size = 200,
                    Value = VeriBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jsonResultsRaw",
                    Size = -1,
                    Value = jsonResultsRaw ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionID_EKyc_SetVeriStatusL1Result>("EXEC @returnValue = [aml].[CDDActionID_EKyc_SetVeriStatusL1] @CDDActionID, @KycFaceRecogStatus, @ErrorMsg, @MatchScore, @ProcessorID, @ProcessorTxnID, @FaceDmsId, @RefDocPage1DmsId, @FullName, @FirstName, @MiddleName1, @MiddleName2, @LastName, @Nationality, @IdType, @IdValue, @BirthDate, @Gender, @jsonAddr, @DocExpiry, @DocIssuingDate, @DocIssuingPlace, @DocIssuingCountry, @DocIssuingAuthority, @VeriRemarks, @VeriBy, @jsonResultsRaw", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CDDActionID_ListRequestsResult>> CDDActionID_ListRequestsAsync(int? CDDActionID, OutputParameter<int?> RowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRowCount = new SqlParameter
            {
                ParameterName = "RowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionID",
                    Value = CDDActionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterRowCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionID_ListRequestsResult>("EXEC @returnValue = [aml].[CDDActionID_ListRequests] @CDDActionID, @RowCount OUTPUT", sqlParameters, cancellationToken);

            RowCount.SetValue(parameterRowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CDDActionIV_ListBankAcctInfoResult>> CDDActionIV_ListBankAcctInfoAsync(int? CDDActionIV, string EntityCIF, string ListIVStatus, string IVMechanism, DateTime? IVStartDateFrom, DateTime? IVStartDateTo, short? BankAcctCodeType, OutputParameter<int?> RowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRowCount = new SqlParameter
            {
                ParameterName = "RowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionIV",
                    Value = CDDActionIV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EntityCIF",
                    Size = 20,
                    Value = EntityCIF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListIVStatus",
                    Size = 10,
                    Value = ListIVStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVMechanism",
                    Size = 32,
                    Value = IVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVStartDateFrom",
                    Value = IVStartDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "IVStartDateTo",
                    Value = IVStartDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "BankAcctCodeType",
                    Value = BankAcctCodeType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterRowCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionIV_ListBankAcctInfoResult>("EXEC @returnValue = [aml].[CDDActionIV_ListBankAcctInfo] @CDDActionIV, @EntityCIF, @ListIVStatus, @IVMechanism, @IVStartDateFrom, @IVStartDateTo, @BankAcctCodeType, @RowCount OUTPUT", sqlParameters, cancellationToken);

            RowCount.SetValue(parameterRowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CDDActionIV_SetBankAcctStatusResult>> CDDActionIV_SetBankAcctStatusAsync(int? CDDActionIV, string IVBankBIC, string IVBankAcctNo, string IVBankAcctName, string IVBankBranch, string ProcessorID, string ProcessorTxnID, string IVMechanism, string ErrorMsg, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionIV",
                    Value = CDDActionIV ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IVBankBIC",
                    Size = 32,
                    Value = IVBankBIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVBankAcctNo",
                    Size = 100,
                    Value = IVBankAcctNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVBankAcctName",
                    Size = 200,
                    Value = IVBankAcctName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVBankBranch",
                    Size = 100,
                    Value = IVBankBranch ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 50,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVMechanism",
                    Size = 32,
                    Value = IVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorMsg",
                    Size = 100,
                    Value = ErrorMsg ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CDDActionIV_SetBankAcctStatusResult>("EXEC @returnValue = [aml].[CDDActionIV_SetBankAcctStatus] @CDDActionIV, @IVBankBIC, @IVBankAcctNo, @IVBankAcctName, @IVBankBranch, @ProcessorID, @ProcessorTxnID, @IVMechanism, @ErrorMsg", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Channel_ListServicePackagesResult>> Channel_ListServicePackagesAsync(string Channel, string ListPackages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Channel",
                    Size = 32,
                    Value = Channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListPackages",
                    Size = 1000,
                    Value = ListPackages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Channel_ListServicePackagesResult>("EXEC @returnValue = [OneReg].[Channel_ListServicePackages] @Channel, @ListPackages", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ErrorLog_GetResult>> ErrorLog_GetAsync(int? ErrTicket, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ErrTicket",
                    Value = ErrTicket ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ErrorLog_GetResult>("EXEC @returnValue = [Meta].[ErrorLog_Get] @ErrTicket", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GenFormNoAsync(string FormType, OutputParameter<string> FormNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterFormNo = new SqlParameter
            {
                ParameterName = "FormNo",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FormNo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FormType",
                    Size = 32,
                    Value = FormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterFormNo,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [OneReg].[GenFormNo] @FormType, @FormNo OUTPUT", sqlParameters, cancellationToken);

            FormNo.SetValue(parameterFormNo.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAppVersionAsync(OutputParameter<int?> AppDBBuildNo, OutputParameter<DateTime?> AppDBDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAppDBBuildNo = new SqlParameter
            {
                ParameterName = "AppDBBuildNo",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AppDBBuildNo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterAppDBDate = new SqlParameter
            {
                ParameterName = "AppDBDate",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AppDBDate?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterAppDBBuildNo,
                parameterAppDBDate,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [Meta].[GetAppVersion] @AppDBBuildNo OUTPUT, @AppDBDate OUTPUT", sqlParameters, cancellationToken);

            AppDBBuildNo.SetValue(parameterAppDBBuildNo.Value);
            AppDBDate.SetValue(parameterAppDBDate.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetPersonInfoJsonAsync(int? EntityID, string NID, string PassportNo, string ID3Type, string ID3Value, string CustAuthMode, OutputParameter<string> JsonPersonInfo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterJsonPersonInfo = new SqlParameter
            {
                ParameterName = "JsonPersonInfo",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = JsonPersonInfo?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EntityID",
                    Value = EntityID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NID",
                    Size = 20,
                    Value = NID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNo",
                    Size = 20,
                    Value = PassportNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ID3Type",
                    Size = 32,
                    Value = ID3Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ID3Value",
                    Size = 20,
                    Value = ID3Value ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustAuthMode",
                    Size = 32,
                    Value = CustAuthMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterJsonPersonInfo,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [OneReg].[GetPersonInfoJson] @EntityID, @NID, @PassportNo, @ID3Type, @ID3Value, @CustAuthMode, @JsonPersonInfo OUTPUT", sqlParameters, cancellationToken);

            JsonPersonInfo.SetValue(parameterJsonPersonInfo.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RegCust_Init3Result>> RegCust_Init3Async(string ICSource, string Channel, string ListPackages, string CustAuthMode, string OrgID, string Title, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Suffix, string Patronym, string Nationality, string NID, string PassportNo, DateTime? PassportExpiry, DateTime? PassportIssuingDate, string PassportIssuingPlace, string PassportIssuingAuthority, DateTime? BirthDate, string Gender, string MobileNo, string Email, string jsonAddrHome, string jsonAddrPost, string BankBIC, string BankAcctNo, string BankAcctName, string fpxBIC, string fpxAcctName, string OccType, string OccIndustry, string OccPosition, string OccCompany, string MotherName, string FaceDmsId, string DocPage1DmsId, string DocPage2DmsId, string emCardDesign, string mcCardDesign, string xUser, OutputParameter<string> RegCaseID, OutputParameter<string> EntityCIF, OutputParameter<string> FormStatus, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRegCaseID = new SqlParameter
            {
                ParameterName = "RegCaseID",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RegCaseID?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterEntityCIF = new SqlParameter
            {
                ParameterName = "EntityCIF",
                Size = 20,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = EntityCIF?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterFormStatus = new SqlParameter
            {
                ParameterName = "FormStatus",
                Size = 1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = FormStatus?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Char,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ICSource",
                    Size = 32,
                    Value = ICSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Channel",
                    Size = 32,
                    Value = Channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListPackages",
                    Size = 1000,
                    Value = ListPackages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustAuthMode",
                    Size = 32,
                    Value = CustAuthMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterRegCaseID,
                parameterEntityCIF,
                new SqlParameter
                {
                    ParameterName = "OrgID",
                    Size = 50,
                    Value = OrgID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Title",
                    Size = 32,
                    Value = Title ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 200,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 200,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName1",
                    Size = 200,
                    Value = MiddleName1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName2",
                    Size = 200,
                    Value = MiddleName2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 200,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Suffix",
                    Size = 100,
                    Value = Suffix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Patronym",
                    Size = 100,
                    Value = Patronym ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nationality",
                    Size = 2,
                    Value = Nationality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NID",
                    Size = 20,
                    Value = NID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportNo",
                    Size = 20,
                    Value = PassportNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportExpiry",
                    Value = PassportExpiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PassportIssuingDate",
                    Value = PassportIssuingDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PassportIssuingPlace",
                    Size = 50,
                    Value = PassportIssuingPlace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PassportIssuingAuthority",
                    Size = 50,
                    Value = PassportIssuingAuthority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 1,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MobileNo",
                    Size = 20,
                    Value = MobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 510,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jsonAddrHome",
                    Size = 8000,
                    Value = jsonAddrHome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "jsonAddrPost",
                    Size = 8000,
                    Value = jsonAddrPost ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankBIC",
                    Size = 32,
                    Value = BankBIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAcctNo",
                    Size = 100,
                    Value = BankAcctNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAcctName",
                    Size = 200,
                    Value = BankAcctName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fpxBIC",
                    Size = 32,
                    Value = fpxBIC ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "fpxAcctName",
                    Size = 200,
                    Value = fpxAcctName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OccType",
                    Size = 32,
                    Value = OccType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OccIndustry",
                    Size = 32,
                    Value = OccIndustry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OccPosition",
                    Size = 32,
                    Value = OccPosition ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OccCompany",
                    Size = 100,
                    Value = OccCompany ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MotherName",
                    Size = 200,
                    Value = MotherName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FaceDmsId",
                    Size = 256,
                    Value = FaceDmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocPage1DmsId",
                    Size = 256,
                    Value = DocPage1DmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocPage2DmsId",
                    Size = 256,
                    Value = DocPage2DmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "emCardDesign",
                    Size = 32,
                    Value = emCardDesign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mcCardDesign",
                    Size = 32,
                    Value = mcCardDesign ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "xUser",
                    Size = 200,
                    Value = xUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterFormStatus,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RegCust_Init3Result>("EXEC @returnValue = [OneReg].[RegCust_Init3] @ICSource, @Channel, @ListPackages, @CustAuthMode, @RegCaseID OUTPUT, @EntityCIF OUTPUT, @OrgID, @Title, @FullName, @FirstName, @MiddleName1, @MiddleName2, @LastName, @Suffix, @Patronym, @Nationality, @NID, @PassportNo, @PassportExpiry, @PassportIssuingDate, @PassportIssuingPlace, @PassportIssuingAuthority, @BirthDate, @Gender, @MobileNo, @Email, @jsonAddrHome, @jsonAddrPost, @BankBIC, @BankAcctNo, @BankAcctName, @fpxBIC, @fpxAcctName, @OccType, @OccIndustry, @OccPosition, @OccCompany, @MotherName, @FaceDmsId, @DocPage1DmsId, @DocPage2DmsId, @emCardDesign, @mcCardDesign, @xUser, @FormStatus OUTPUT", sqlParameters, cancellationToken);

            RegCaseID.SetValue(parameterRegCaseID.Value);
            EntityCIF.SetValue(parameterEntityCIF.Value);
            FormStatus.SetValue(parameterFormStatus.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RegCust_SetDVStatusResult>> RegCust_SetDVStatusAsync(string RegCaseID, string DVMechanism, string ProcessorID, string ProcessorTxnID, string DocType, string DocImg1, string DocImg2, string VeriStatus, int? MatchScore, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RegCaseID",
                    Size = 20,
                    Value = RegCaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DVMechanism",
                    Size = 32,
                    Value = DVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 32,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocType",
                    Size = 32,
                    Value = DocType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocImg1",
                    Size = 256,
                    Value = DocImg1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocImg2",
                    Size = 256,
                    Value = DocImg2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VeriStatus",
                    Size = 1,
                    Value = VeriStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MatchScore",
                    Value = MatchScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 100,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RegCust_SetDVStatusResult>("EXEC @returnValue = [OneReg].[RegCust_SetDVStatus] @RegCaseID, @DVMechanism, @ProcessorID, @ProcessorTxnID, @DocType, @DocImg1, @DocImg2, @VeriStatus, @MatchScore, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RegCust_SetIVStatusResult>> RegCust_SetIVStatusAsync(string RegCaseID, string FieldName, string FieldStatus, string IVMechanism, string ProcessorID, string ProcessorTxnID, int? IVMatchScore, string IVFieldValue, string Remarks, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RegCaseID",
                    Size = 20,
                    Value = RegCaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldName",
                    Size = 32,
                    Value = FieldName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldStatus",
                    Size = 1,
                    Value = FieldStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "IVMechanism",
                    Size = 32,
                    Value = IVMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 32,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IVMatchScore",
                    Value = IVMatchScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IVFieldValue",
                    Size = 600,
                    Value = IVFieldValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 100,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RegCust_SetIVStatusResult>("EXEC @returnValue = [OneReg].[RegCust_SetIVStatus] @RegCaseID, @FieldName, @FieldStatus, @IVMechanism, @ProcessorID, @ProcessorTxnID, @IVMatchScore, @IVFieldValue, @Remarks", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RegCust_SetKycStatusResult>> RegCust_SetKycStatusAsync(string RegCaseID, string CustAuthMode, string ProcessorID, string ProcessorTxnID, string IDMechanism, string KycFaceRecogStatus, int? MatchScore, string FaceDmsId, string RefDocPage1DmsId, string FullName, string FirstName, string MiddleName1, string MiddleName2, string LastName, string Nationality, string IdType, string IdValue, DateTime? BirthDate, string Gender, string jsonAddr, string RefDocPage2DmsId, DateTime? DocExpiry, DateTime? DocIssuingDate, string DocIssuingPlace, string DocIssuingCountry, string DocIssuingAuthority, string Remarks, string xUser, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RegCaseID",
                    Size = 20,
                    Value = RegCaseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustAuthMode",
                    Size = 32,
                    Value = CustAuthMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorID",
                    Size = 32,
                    Value = ProcessorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProcessorTxnID",
                    Size = 128,
                    Value = ProcessorTxnID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IDMechanism",
                    Size = 32,
                    Value = IDMechanism ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "KycFaceRecogStatus",
                    Size = 1,
                    Value = KycFaceRecogStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "MatchScore",
                    Value = MatchScore ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FaceDmsId",
                    Size = 256,
                    Value = FaceDmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RefDocPage1DmsId",
                    Size = 256,
                    Value = RefDocPage1DmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 200,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 200,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName1",
                    Size = 200,
                    Value = MiddleName1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MiddleName2",
                    Size = 200,
                    Value = MiddleName2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 200,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Nationality",
                    Size = 2,
                    Value = Nationality ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdType",
                    Size = 32,
                    Value = IdType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdValue",
                    Size = 20,
                    Value = IdValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BirthDate",
                    Value = BirthDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Gender",
                    Size = 1,
                    Value = Gender ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                new SqlParameter
                {
                    ParameterName = "jsonAddr",
                    Size = 8000,
                    Value = jsonAddr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RefDocPage2DmsId",
                    Size = 256,
                    Value = RefDocPage2DmsId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocExpiry",
                    Value = DocExpiry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingDate",
                    Value = DocIssuingDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingPlace",
                    Size = 50,
                    Value = DocIssuingPlace ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingCountry",
                    Size = 2,
                    Value = DocIssuingCountry ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DocIssuingAuthority",
                    Size = 50,
                    Value = DocIssuingAuthority ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Remarks",
                    Size = 600,
                    Value = Remarks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "xUser",
                    Size = 200,
                    Value = xUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RegCust_SetKycStatusResult>("EXEC @returnValue = [OneReg].[RegCust_SetKycStatus] @RegCaseID, @CustAuthMode, @ProcessorID, @ProcessorTxnID, @IDMechanism, @KycFaceRecogStatus, @MatchScore, @FaceDmsId, @RefDocPage1DmsId, @FullName, @FirstName, @MiddleName1, @MiddleName2, @LastName, @Nationality, @IdType, @IdValue, @BirthDate, @Gender, @jsonAddr, @RefDocPage2DmsId, @DocExpiry, @DocIssuingDate, @DocIssuingPlace, @DocIssuingCountry, @DocIssuingAuthority, @Remarks, @xUser", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ServicePackage_ListFieldMandatorinessResult>> ServicePackage_ListFieldMandatorinessAsync(string ListPackages, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ListPackages",
                    Size = 1000,
                    Value = ListPackages ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ServicePackage_ListFieldMandatorinessResult>("EXEC @returnValue = [OneReg].[ServicePackage_ListFieldMandatoriness] @ListPackages", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SSTxn_ListRequestsResult>> SSTxn_ListRequestsAsync(int? CDDActionSS, OutputParameter<int?> RowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRowCount = new SqlParameter
            {
                ParameterName = "RowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionSS",
                    Value = CDDActionSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterRowCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SSTxn_ListRequestsResult>("EXEC @returnValue = [Onfido].[SSTxn_ListRequests] @CDDActionSS, @RowCount OUTPUT", sqlParameters, cancellationToken);

            RowCount.SetValue(parameterRowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SSTxn_SetResultV2Result>> SSTxn_SetResultV2Async(int? CDDActionSS, string jsonRes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CDDActionSS",
                    Value = CDDActionSS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "jsonRes",
                    Size = -1,
                    Value = jsonRes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SSTxn_SetResultV2Result>("EXEC @returnValue = [Onfido].[SSTxn_SetResultV2] @CDDActionSS, @jsonRes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WFForms_ListResult>> WFForms_ListAsync(string FormNo, string FormType, string OrganizationId, string ListFormStatus, string ListChannel, string ListServicePackage, string FullName, string MobileNo, string IdNo, int? HostSubmitStatus, DateTime? xDateCreatedFrom, DateTime? xDateCreatedTo, string xUser, OutputParameter<int?> RowCount, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRowCount = new SqlParameter
            {
                ParameterName = "RowCount",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RowCount?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FormNo",
                    Size = 20,
                    Value = FormNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FormType",
                    Size = 32,
                    Value = FormType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OrganizationId",
                    Size = 50,
                    Value = OrganizationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListFormStatus",
                    Size = 10,
                    Value = ListFormStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListChannel",
                    Size = 100,
                    Value = ListChannel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ListServicePackage",
                    Size = 100,
                    Value = ListServicePackage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FullName",
                    Size = 200,
                    Value = FullName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "MobileNo",
                    Size = 20,
                    Value = MobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdNo",
                    Size = 100,
                    Value = IdNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HostSubmitStatus",
                    Value = HostSubmitStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "xDateCreatedFrom",
                    Value = xDateCreatedFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "xDateCreatedTo",
                    Value = xDateCreatedTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "xUser",
                    Size = 200,
                    Value = xUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterRowCount,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WFForms_ListResult>("EXEC @returnValue = [OneReg].[WFForms_List] @FormNo, @FormType, @OrganizationId, @ListFormStatus, @ListChannel, @ListServicePackage, @FullName, @MobileNo, @IdNo, @HostSubmitStatus, @xDateCreatedFrom, @xDateCreatedTo, @xUser, @RowCount OUTPUT", sqlParameters, cancellationToken);

            RowCount.SetValue(parameterRowCount.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
