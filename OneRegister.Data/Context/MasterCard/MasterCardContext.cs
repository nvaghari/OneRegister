// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using OneRegister.Data.Entities.MasterCardGems;

#nullable disable

namespace OneRegister.Data.Context.MasterCard
{
    public partial class MasterCardContext : DbContext
    {
        public MasterCardContext()
        {
        }

        public MasterCardContext(DbContextOptions<MasterCardContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ClAddressType> ClAddressType { get; set; }
        public virtual DbSet<ClBank> ClBank { get; set; }
        public virtual DbSet<ClBizService> ClBizService { get; set; }
        public virtual DbSet<ClBusinessNature> ClBusinessNature { get; set; }
        public virtual DbSet<ClCddactionIcsource> ClCddactionIcsource { get; set; }
        public virtual DbSet<ClChannel> ClChannel { get; set; }
        public virtual DbSet<ClCountry> ClCountry { get; set; }
        public virtual DbSet<ClCountryState> ClCountryState { get; set; }
        public virtual DbSet<ClFormType> ClFormType { get; set; }
        public virtual DbSet<ClIdType> ClIdType { get; set; }
        public virtual DbSet<ClLanguage> ClLanguage { get; set; }
        public virtual DbSet<ClMaritalStatus> ClMaritalStatus { get; set; }
        public virtual DbSet<ClOccupation> ClOccupation { get; set; }
        public virtual DbSet<ClPersonTitle> ClPersonTitle { get; set; }
        public virtual DbSet<ClRemitIdType> ClRemitIdType { get; set; }
        public virtual DbSet<ClSenderBeneRelation> ClSenderBeneRelation { get; set; }
        public virtual DbSet<ClServicePackage> ClServicePackage { get; set; }
        public virtual DbSet<ClSourceOfFunds> ClSourceOfFunds { get; set; }
        public virtual DbSet<ClTxnPurpose> ClTxnPurpose { get; set; }
        public virtual DbSet<Wfforms> Wfforms { get; set; }
        public virtual DbSet<Wfinstance> Wfinstance { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Latin1_General_CI_AI");

            modelBuilder.Entity<ClAddressType>(entity =>
            {
                entity.HasComment("Codelist of possible address types, eg: home, work, post, billing, shipping");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClBank>(entity =>
            {
                entity.HasKey(e => new { e.CodeType, e.BankCode });

                entity.HasComment("Codelist of Banks that are used for Bank Account information");

                entity.HasIndex(e => new { e.CountryCodeNum, e.BankName }, "IX_CL_Bank_CountryCodeNum_BankName")
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CodeType)
                    .HasDefaultValueSql("((1))")
                    .HasComment("1=BankCode, 2=RPP/SWIFT, 3=FPX");

                entity.Property(e => e.BankCode)
                    .IsUnicode(false)
                    .HasComment("Bank Code for the specific CodeType");

                entity.Property(e => e.BankAcctNoFormat)
                    .IsUnicode(false)
                    .HasComment("Bank Account Number format in regular expression syntax");

                entity.Property(e => e.BankName).HasComment("Name of Bank");

                entity.Property(e => e.CountryCodeNum)
                    .IsUnicode(false)
                    .HasComment("Country where this Bank operates. CountryCode is based on ISO-3166-2");

                entity.HasOne(d => d.CountryCodeNumNavigation)
                    .WithMany(p => p.ClBank)
                    .HasPrincipalKey(p => p.IsoNumeric)
                    .HasForeignKey(d => d.CountryCodeNum)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ClBizService>(entity =>
            {
                entity.HasComment("Table containing list of Business Services/Products, eg: OnePay, OneDebit, eM-ONEi, M1Pay, etc");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClBusinessNature>(entity =>
            {
                entity.HasComment("Codelist of BusinessNatures as part of Industry-BusinessNature pair");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.RiskLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("AML/CDD Risk Level [1-5] with Lowest=1, Highest=5");
            });

            modelBuilder.Entity<ClCddactionIcsource>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.LongName).HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<ClChannel>(entity =>
            {
                entity.HasComment("Codelist of possible channels, eg: APPC,APPA,EDCA,...");

                entity.HasIndex(e => e.CodeNum, "IX_CL_Channel_CodeNum")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClCountry>(entity =>
            {
                entity.HasComment("Codelist of Countries");

                entity.HasIndex(e => e.CountryName2, "IX_CL_Country_CountryName2")
                    .IsUnique()
                    .HasFilter("([CountryName2] IS NOT NULL)");

                entity.Property(e => e.Capital).IsUnicode(false);

                entity.Property(e => e.Continent).IsUnicode(false);

                entity.Property(e => e.ContinentName).IsUnicode(false);

                entity.Property(e => e.CountryCode)
                    .IsUnicode(false)
                    .HasComment("ISO-3166 alpha-2 code (eg: MY, BD), as per https://en.wikipedia.org/wiki/ISO_3166-1");

                entity.Property(e => e.CountryName)
                    .IsUnicode(false)
                    .HasComment("Name of Country");

                entity.Property(e => e.CountryName2).IsUnicode(false);

                entity.Property(e => e.CurrencyCode)
                    .IsUnicode(false)
                    .HasComment("Currency Code as per ISO 4217, eg: MYR, USD, BDT");

                entity.Property(e => e.East).IsUnicode(false);

                entity.Property(e => e.FipsCode).IsUnicode(false);

                entity.Property(e => e.IsoAlpha3).IsUnicode(false);

                entity.Property(e => e.IsoNumeric)
                    .IsUnicode(false)
                    .HasComment("Country numeric code as per ISO-3166, eg: 458, 840, 050");

                entity.Property(e => e.Languages).IsUnicode(false);

                entity.Property(e => e.North).IsUnicode(false);

                entity.Property(e => e.PhonePrefix)
                    .IsUnicode(false)
                    .HasComment("Phone Prefix of the Country");

                entity.Property(e => e.South).IsUnicode(false);

                entity.Property(e => e.West).IsUnicode(false);
            });

            modelBuilder.Entity<ClCountryState>(entity =>
            {
                entity.HasKey(e => new { e.CountryCode, e.StateIsocode });

                entity.HasIndex(e => new { e.CountryCode, e.StateName }, "UX_CL_CountryState_CountryCode_StateName")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.CountryCode).IsUnicode(false);

                entity.Property(e => e.StateIsocode).IsUnicode(false);

                entity.Property(e => e.StateAbbr).IsUnicode(false);

                entity.Property(e => e.StateName).IsUnicode(false);

                entity.HasOne(d => d.CountryCodeNavigation)
                    .WithMany(p => p.ClCountryState)
                    .HasPrincipalKey(p => p.CountryCode)
                    .HasForeignKey(d => d.CountryCode)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ClFormType>(entity =>
            {
                entity.Property(e => e.FormType).IsUnicode(false);

                entity.Property(e => e.Descr).IsUnicode(false);
            });

            modelBuilder.Entity<ClIdType>(entity =>
            {
                entity.HasComment("Table containing list of Personal Identification Types, eg: MyKad, Passport");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClLanguage>(entity =>
            {
                entity.HasComment("Codelist of possible languages, eg: en,bm,th,ar");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClMaritalStatus>(entity =>
            {
                entity.HasComment("Codelist of MaritalStatuss as part of Industry-MaritalStatus pair");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClOccupation>(entity =>
            {
                entity.HasComment("Codelist of occupations as part of Industry-Occupation pair");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.RiskLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("AML/CDD Risk Level [1-5] with Lowest=1, Highest=5");
            });

            modelBuilder.Entity<ClPersonTitle>(entity =>
            {
                entity.HasComment("Codelist of possible person titles, eg: Mr, Mrs, Miss, Dr, Chief, Sir, Ms, Datuk, Datuk Sri, Tun, Dato");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClRemitIdType>(entity =>
            {
                entity.HasComment("Codelist of possible customer identification types for remittance");

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<ClSenderBeneRelation>(entity =>
            {
                entity.HasComment("Codelist of possible relationship between sender & beneficiary");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.RiskLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("AML/CDD Risk Level [1-5] with Lowest=1, Highest=5");
            });

            modelBuilder.Entity<ClServicePackage>(entity =>
            {
                entity.HasKey(e => new { e.ServiceCode, e.Package })
                    .IsClustered(false);

                entity.HasIndex(e => e.ServicePackage, "UX_CL_ServicePackage_ServicePackage")
                    .IsUnique()
                    .IsClustered()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.ServiceCode).IsUnicode(false);

                entity.Property(e => e.Package).IsUnicode(false);

                entity.Property(e => e.Descr).IsUnicode(false);

                entity.Property(e => e.PackageName)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ServicePackage)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(CONVERT([varchar](32),([ServiceCode]+'_')+[Package]))", true);

                entity.HasOne(d => d.ServiceCodeNavigation)
                    .WithMany(p => p.ClServicePackage)
                    .HasForeignKey(d => d.ServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<ClSourceOfFunds>(entity =>
            {
                entity.HasComment("Codelist of Source of Funds for Customer performing e-money or remittance txns. Part of KYC/CDD requirements");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.RiskLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("AML/CDD Risk Level [1-5] with Lowest=1, Highest=5");
            });

            modelBuilder.Entity<ClTxnPurpose>(entity =>
            {
                entity.HasComment("Codelist of possible purpose of transactions for remittance");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.RiskLevel)
                    .HasDefaultValueSql("((1))")
                    .HasComment("AML/CDD Risk Level [1-5] with Lowest=1, Highest=5");
            });

            modelBuilder.Entity<Wfforms>(entity =>
            {
                entity.HasIndex(e => e.Channel, "IX_WFForms_Channel")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.FormType, "IX_WFForms_FormType")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.FullName, "IX_WFForms_FullName")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.MobileNo, "IX_WFForms_MobileNo")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.OrgId, "IX_WFForms_OrgId")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.XIsDeleted, "IX_WFForms_xIsDeleted")
                    .HasFillFactor((byte)90);

                entity.HasIndex(e => e.PkId, "UX_WFForms_PkID")
                    .IsUnique()
                    .HasFillFactor((byte)90);

                entity.Property(e => e.FormNo).IsUnicode(false);

                entity.Property(e => e.Channel).IsUnicode(false);

                entity.Property(e => e.FormName).IsUnicode(false);

                entity.Property(e => e.FormStatus).IsUnicode(false);

                entity.Property(e => e.FormType).IsUnicode(false);

                entity.Property(e => e.FullName).HasComputedColumnSql("(CONVERT([nvarchar](100),json_value([FormContent],'$.name.fullName')))", true);

                entity.Property(e => e.MobileNo)
                    .IsUnicode(false)
                    .HasComputedColumnSql("(CONVERT([varchar],json_value([FormContent],'$.mobileNo')))", true);

                entity.Property(e => e.OrgId).IsUnicode(false);

                entity.Property(e => e.PkId).ValueGeneratedOnAdd();

                entity.Property(e => e.XCreatedBy).HasComment("User who first created this record");

                entity.Property(e => e.XDateCreated)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date this record was first created");

                entity.Property(e => e.XDateModified)
                    .HasDefaultValueSql("(getdate())")
                    .HasComment("Date this record was last modified");

                entity.Property(e => e.XEditLockBy).HasComment("User who has currently locked this record for editing");

                entity.Property(e => e.XEditLockTime).HasComment("Datetime when this record was locked for editing");

                entity.Property(e => e.XIsDeleted).HasComment("Is this record marked as deleted? 0=No, 1=Yes");

                entity.Property(e => e.XModifiedBy).HasComment("User who last modified this record");

                entity.HasOne(d => d.FormTypeNavigation)
                    .WithMany(p => p.Wfforms)
                    .HasForeignKey(d => d.FormType)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Wfinstance>(entity =>
            {
                entity.Property(e => e.Status)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Wftype).IsUnicode(false);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}